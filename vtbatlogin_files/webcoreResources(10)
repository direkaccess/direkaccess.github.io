function getBaseId( node )
{
  if( node.id )
  {
    for( var i = node.id.length; i >= 0; i-- )
    {
      if( node.id.charAt( i ) == "-" )
        return node.id.substring( 0, i );
    }
  }

  return null;
}

function getRowIds( node )
{
  var rowIds = new Array();
  if( node.id )
  {
    var baseId = getBaseId( node );
    if( baseId )
    {
      var innerRow = 0;
      while( document.getElementById( baseId + "-" + innerRow ) )
      {
        rowIds.push( baseId + "-" + innerRow );
        innerRow++;
      }
    }
  }

  return rowIds;
}

function handleMouseOver( node, isCommand )
{
  setTimeout( function()
              {
                var rowIds = getRowIds( node );
                for( var i = 0; i < rowIds.length; i++ )
                {
                  var rowId = rowIds[i];
                  var elem = document.getElementById( rowId );
                  if( elem )
                  {
                    if( isCommand )
                    {
                      if( elem.className.indexOf( "MouseOverCommand" ) == -1 )
                        $( elem ).addClass( "MouseOverCommand" );
                    }
                    else
                    {
                      if( elem.className.indexOf( "MouseOver" ) == -1 )
                        $( elem ).addClass( "MouseOver" );
                    }
                  }
                }
              }, 0 );
}

function handleMouseOut( node )
{
  setTimeout( function()
              {
                var rowIds = getRowIds( node );
                for( var i = 0; i < rowIds.length; i++ )
                {
                  var rowId = rowIds[i];
                  var elem = document.getElementById( rowId );
                  if( elem )
                  {
                    if( elem.className.indexOf( "MouseOverCommand" ) != -1 )
                      $( elem ).removeClass( "MouseOverCommand" );
                    if( elem.className.indexOf( "MouseOver" ) != -1 )
                      $( elem ).removeClass( "MouseOver" );
                  }
                }
              }, 0 );
}

/*
 * see http://www.quirksmode.org/js/events_order.html#link9 sp = stopPropagation
 * (Kein Hochreichen eines onclick events an den hoeheren container)
 */
function sp( e )
{
  if( !e )
    e = window.event;

  e.cancelBubble = true;
  if( e.stopPropagation )
    e.stopPropagation();
}

/* Check/UnCheck checkBoxes */
function checkAll( idPrefix, state )
{
  var elements = document.getElementsByTagName( "input" );
  for( var i = 0; i < elements.length; i++ )
  {
    var element = elements[i];
    if( "checkbox" == element.type && element.id
      && element.id.indexOf( idPrefix ) == 0 )
      element.checked = state;
  }
}

function tablePopup( rowId, url, width, height )
{
  try
  {
    selectTableRow( rowId );
  }
  catch ( e )
  {
    // do nothing
  }
  var windowHandle = window.open( "", "generalPopup", "resizable=yes, scrollbars=yes, status=yes, toolbar=no, width=" + width + ", height=" + height );
  try
  {
    windowHandle.document.location.href = url;
  }
  catch ( exc )
  {
    windowHandle.close();
    windowHandle = window.open( "", "generalPopup", "resizable=yes, scrollbars=yes, status=yes, toolbar=no, width=" + width + ", height=" + height );
    windowHandle.document.location.href = url;
  }
  windowHandle.focus();
}

function handleCheckboxClick( checkbox, rowId )
{
  if( checkbox.checked )
    selectHighlightTableRow( rowId );
  else
    deselectHighlightTableRow( rowId );
}

var CSS_CLASS_MOUSEOVER = "MouseOver";
var CSS_CLASS_MOUSEOVER_COMMAND = "MouseOverCommand";
var CSS_CLASS_HIGHLIGHT = "Highlight";
var CSS_CLASS_HIGHLIGHT_SELECTED = "HighlightSelect";

var KEY_WORDS = new Array( CSS_CLASS_MOUSEOVER, CSS_CLASS_MOUSEOVER_COMMAND, CSS_CLASS_HIGHLIGHT, CSS_CLASS_HIGHLIGHT_SELECTED );
var additionalCssClassesById = new Array(); // <id, Array<String>>
defineIndexOfForArrays();

function removeKeyWordsAndTrim( value )
{
  var splitted = value.split( " " );
  var result = new Array();
  for( var i = 0; i < splitted.length; i++ )
  {
    var cssClass = splitted[i];
    if( KEY_WORDS.indexOf( cssClass ) == -1 ) // no keyWord
      result.push( cssClass );
  }

  return result.join( " " );
}


function applyCssClassesToRowId( rowId )
{
  var elem = document.getElementById( rowId );
  if( elem )
  {
    var cssClass = removeKeyWordsAndTrim( elem.className );
    var additionalCssClasses = additionalCssClassesById[rowId];
    if( additionalCssClasses )      cssClass += " " + additionalCssClasses.join( " " );
    elem.className = cssClass;
  }
}

function addCssClass( rowIds, cssClass )
{
  for( var i = 0; i < rowIds.length; i++ )
  {
    var rowId = rowIds[i];
    var additionalCssClasses = additionalCssClassesById[ rowId];
    if( !additionalCssClasses )
    {
      additionalCssClasses = new Array();
      additionalCssClassesById[rowId] = additionalCssClasses;
    }

    // check if already set
    if( additionalCssClasses.indexOf( cssClass ) == -1 )
      additionalCssClasses.push( cssClass );
    applyCssClassesToRowId( rowId );
  }
}

function deleteCssClass( rowIds, cssClass )
{
  for( var i = 0; i < rowIds.length; i++ )
  {
    var rowId = rowIds[i];
    var additionalCssClasses = additionalCssClassesById[rowId ];
    if( additionalCssClasses )
    {
      // construct a new one
      var result = new Array();
      for( var j = 0; j < additionalCssClasses.length; j++ )
      {
        if( additionalCssClasses[j] != cssClass )
          result.push( additionalCssClasses[j] );
      }

      additionalCssClassesById[rowId] = result;
    }

    applyCssClassesToRowId( rowId );
  }
}

var lastSelectedTableRowIds;

/** private **/
function selectTableRow( rowId )
{
  var rowIds = getRowIds( document.getElementById( rowId ) );
  // first remove from other selected
  if( lastSelectedTableRowIds )
    deleteCssClass( lastSelectedTableRowIds, CSS_CLASS_HIGHLIGHT );

  addCssClass( rowIds, CSS_CLASS_HIGHLIGHT );
  lastSelectedTableRowIds = rowIds;
}

function selectHighlightTableRow( rowId )
{
  var rowIds = getRowIds( document.getElementById( rowId ) );
  addCssClass( rowIds, CSS_CLASS_HIGHLIGHT_SELECTED );
}

function deselectHighlightTableRow( rowId )
{
  var rowIds = getRowIds( document.getElementById( rowId ) );
  deleteCssClass( rowIds, CSS_CLASS_HIGHLIGHT_SELECTED );
}
