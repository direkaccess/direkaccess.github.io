/*
 * @param instanceName - used as Id and reference to the Instance
 * @param fakeComboName - simulates a standard Combobox for interaction width webcore
 * @param standardCoice - standard choice
 * @param visibleItemCount - amount of the visible Items (optional)
 */
function ComboEditField(instanceName, fakeComboName,
		standardChoice, visibleItemCount) {
	
	var labels = new Array();
	
	var values = new Array();

	var curSel = standardChoice == -1 ? 0 : standardChoice;
	// height of a entry in px
	var cellHeight = 0;
	// height of dropdownbox
	var choiceTableHeight = 0;
	var mouseOver = false;
	// list of favorites choose by value of the input field
	var matches = new Array();

	var choiceWindowSizeCalculated = false;

	this.initLabels = function() {
		var selTable = document.getElementById(instanceName + "SelectionTable");
		var selEntries = selTable.getElementsByTagName("span");
		matches=this.getIdListOfMatches();
		
		for (var i=0;i<selEntries.length;i++) {
			var label = selEntries[i].innerText || selEntries[i].textContent;
			
			//title Attribute indicates that technical value and label are different
			var title = selEntries[i].getAttribute("title");
			title = title ? title : label;
			labels.push(label);
			values.push(title);
		}
	};
	
	this.init = function() {
		defineIndexOfForArrays();
		
	 	this.initLabels();
	 	this.prepareChoiceWindowSize();
	 	this.prepareSubmit();
		
		var inputField = $("#" + instanceName + "ComboeditInput");
		inputField.focus(function() {
			this.select();	
		});
	};

	// ********************************************************Rendering & Display***********************************************
	this.refreshDropDownList = function() {
		for (var l = 0; l < labels.length; l++) {
			this.setHover(false,l);
		}
		for (var m = 0; m < matches.length; m++) {
			this.setHover(false,matches[m]);
		}
		this.setHover(true, curSel);
	};

	this.hideDropDownList = function() {
		document.getElementById(instanceName + "DropDownList").style.visibility = 'hidden';
		this.prepareSubmit();
		this.setMouseOut();
		this.scrollToActualSelection();
	};

	this.hideDropDownListIfMouseOut = function() {
		if (!mouseOver) {
			this.hideDropDownList();
		} else {
			document.getElementById(instanceName + "ComboeditInput").focus();
		}
	};

	this.refreshFromInputIfMouseOut = function() {
		if(!mouseOver) {
			this.refreshFromInput();
		}
	};
	
	this.showDropDownList = function() {
		this.setChoiceWindowSize();
		document.getElementById(instanceName + "DropDownList").style.visibility = 'visible';
		this.refreshDropDownList();
	};
	
	this.renderFavorites = function() {
		if (visibleItemCount>=labels.length||document.getElementById(instanceName + "ComboeditInput").value=="") return;
		matches = this.getIdListOfMatches();
		
		var favTable = document.getElementById(instanceName + "FavoriteTable").getElementsByTagName("tbody")[0];
		
		
		var actFavs = favTable.getElementsByTagName("tr");
		var favAmount=actFavs.length;
		
		for (var i=0;i<favAmount; i++) {
			favTable.removeChild(actFavs[0]);
		}
		
		if (matches.length < 2) return;
		var selTable = document.getElementById(instanceName + "SelectionTable");
		
		for ( var i = 0; i < matches.length; i++) {
			var el = document.getElementById( instanceName + 'comboEditFieldEntry' + matches[i]);
			var favEl = el.cloneNode(true);
			//use negative ids for Favorites
			favEl.setAttribute("id", instanceName + 'comboEditFieldEntry' + (-matches[i]));
			
			favEl.setAttribute("onmouseover", instanceName + ".setHover(true,"+ (-matches[i])+")");
			favEl.setAttribute("onmouseout", instanceName + ".setHover(false,"+ (-matches[i])+")");
			favTable.appendChild(favEl);
		}
		var separator = favTable.insertRow(matches.length);
		separator = separator.insertCell(0);
		
		separator.className="FormAreaHorizontalSeparator";
		if (matches.length>0)
		{
			document.getElementById(instanceName + "FavoriteTable").style.display='';
		}
		else document.getElementById(instanceName + "FavoriteTable").style.display='none';
	};

	// calculate size of drop down box
	this.setChoiceWindowSize = function() {
		if (!choiceWindowSizeCalculated) {
		visibleItemCount = visibleItemCount ? visibleItemCount : 10;
		var choiceTableDiv = $('#'+instanceName + "DropDownList");
		var choiceTable = $('#'+instanceName + "SelectionTable");

		var inputFieldWidth=$('#'+instanceName + "ComboeditInput").width();

		//if input field wider than dropdown choice table then make it equal
		if (inputFieldWidth>choiceTable.width()){
			choiceTable.css("width", inputFieldWidth + "px");
		}
		
		if (labels.length>visibleItemCount) {

			//TODO remove, not shure for what it is...old effect on old browsers?
			//if (navigator.userAgent.search(/Firefox/)!=-1) {
				//choiceTableDiv.css("overflowY","scroll");
				//choiceTableDiv.css("width",choiceTableDiv.width()+"px;");
			//}

			var entryList = choiceTable.find("tr");
			//lines multiple line entries are enclosed in divs 
			var entryDivs = entryList.find("div");
			entryList = entryDivs.size() > 0 ? entryDivs : entryList;

			cellHeight = $(entryList[0]).height();
		
			choiceTableHeight = visibleItemCount * cellHeight;
			choiceTableDiv.css("height", choiceTableHeight + "px");
			choiceTableDiv.css("overflowY","scroll");
			choiceTableDiv.css("overflowX","hidden");
		}
		$('#'+instanceName + "FavoriteTable").css("width",choiceTable.width() + "px");
			choiceWindowSizeCalculated=true;
 		}
	};

	//initial limitation of choice table height.
	this.prepareChoiceWindowSize = function() {
		if (labels.length>visibleItemCount) {
			var choiceTableDiv = $('#'+instanceName + "DropDownList");
			choiceTableDiv.css("height", 50 + "px");
			choiceTableDiv.css("overflowY","scroll");
		}
		var inputField = $( '#' + instanceName + "ComboeditInput" );
		inputField.width( inputField.parent().width() + "px");
		
		this.choiceWindowSizeCalculated=false;
	};

	this.scrollToActualSelection = function() {
		this.renderFavorites();
		var scrollTo = parseInt(curSel);
		var selectedItem = $('#'+ instanceName + 'comboEditFieldEntry' + scrollTo);
		//needed for height of visible section
		var listDiv = $('#'+instanceName + "DropDownList");
		//needed for start of the real list
		var listTable = $('#'+instanceName + "SelectionTable");
		//position of selected item - half of (choicetable + item height).
		var currentPixPos = selectedItem.offset().top-listTable.offset().top
			- parseInt(listDiv.height() - selectedItem.height())/2;
		listDiv.scrollTop(parseInt(currentPixPos));
	};

	this.setHover = function(hover, id) {
		var entry = document.getElementById(instanceName + 'comboEditFieldEntry' + id);
		if (!entry)
			return;
		if (hover)
			entry.className = 'FormAreaEditableComboEditFieldSelectionHover';
		if (!hover && parseInt(id) != curSel)
			entry.className = 'FormAreaEditableComboEditFieldSelection';
	};

	this.setMouseOver = function() {
		mouseOver = true;
	};

	this.setMouseOut = function() {
		mouseOver = false;
	};

	// *********************************************************Input validation*******************************************
	// get actual "selection"
	this.getIndexOfFirstMatch = function() {
		var newSel = -1;
		var input = document.getElementById(instanceName + "ComboeditInput").value;
		if (input.length == 0)
			return curSel;
		var searchLabel = "";
		// search for similar entry - expecting a sorted List for exact match
		for ( var i = 0; i < labels.length; i++) {
			searchLabel = labels[i] + " " + values[i];
			var inputMatchChoicePosition = searchLabel.toLowerCase().indexOf(
					input.toLowerCase());
			// wordStart = space before value or line start
			var wordStart = searchLabel.charCodeAt(inputMatchChoicePosition-1)==32 || inputMatchChoicePosition==0;
			if (inputMatchChoicePosition != -1 && wordStart) {
				newSel = i;
				break;
			}
		}
		curSel = newSel == -1 ? curSel : newSel;
		return curSel;
	};

	this.getIdListOfMatches = function() {
		var matches = new Array();
		var input = document.getElementById(instanceName + "ComboeditInput").value;

		for ( var i = 0; i < labels.length; i++) {
			searchLabel = labels[i] + " " + values[i];
			var inputMatchChoicePosition = searchLabel.toLowerCase().indexOf(input.toLowerCase());
			//space before or line start?
			var wordStart = searchLabel.charCodeAt(inputMatchChoicePosition-1)==32 || inputMatchChoicePosition==0;
			if (input.length != 0 && inputMatchChoicePosition != -1 && wordStart) {
				matches.push(i);
			}
		}
		return matches;
	};

	this.keyUp = function(event) {
		event = event || window.event;
		var preSel = curSel;
		this.showDropDownList();

		//enter
		if ( event.keyCode == 13 ) {
			//set value over element event, cause it has informations about autosubmit and ajaxsubmit
			document.getElementById(instanceName + 'comboEditFieldEntry' + curSel).onmouseup();
		} else if (event.keyCode == 27) {//ESC
			curSel++;
			this.setHover(false, preSel);
			this.hideDropDownList();
		}
		else if (event.keyCode != 13 && event.keyCode != 38 && event.keyCode != 40 ) {
			this.renderFavorites();
			curSel = matches.length > 1 ? -matches[0] : this.getIndexOfFirstMatch();
			this.scrollToActualSelection();
		}
		this.refreshDropDownList();
	};

	this.keyDown = function(event) {
		event = event || window.event;
		var preSel = curSel;
		var vis = document.getElementById(instanceName + "DropDownList").style.visibility == 'visible';

		//key up
		if (event.keyCode == 38) {
			if (curSel > 0 && vis)
				curSel--;
			else if (matches.length > 0 && vis) {
				curSel = curSel != 0 ? -matches[matches.indexOf(-curSel) - 1] : -matches[matches.length - 1];
				curSel = curSel ? curSel : -matches[0];
			}
			this.scrollToActualSelection();
		} else if (event.keyCode == 40) { // key down
			if (curSel < (labels.length - 1) && curSel >= 0 && vis)
				curSel++;
			else if (matches.length > 0 && vis) {
				curSel = -matches[matches.indexOf(-curSel) + 1] ? -matches[matches.indexOf(-curSel) + 1] : 0;
			}
			this.scrollToActualSelection();
		}

		this.setHover(false, preSel);
		this.setHover(true, curSel);
		this.refreshDropDownList();
	};

	this.refreshFromInput = function() {
		this.renderFavorites();
		this.showDropDownList();
		this.scrollToActualSelection();
	};

	// ***************************************************************Output generation******************************************
	// Set value of input field
	this.setValue = function(id) {
		var preSel = curSel;
		curSel = parseInt(id);
		this.setHover(false, preSel);
		// create an Element to put Text into - formatting into HTML
		var tmpNode = document.createElement("div");
		if (values.length > curSel)
			tmpNode.innerHTML = values[Math.abs(curSel)];
		var val = tmpNode.textContent || tmpNode.innerText;
		document.getElementById(instanceName + "ComboeditInput").value = val ? val : "";
		this.setHover(true, curSel);
		this.prepareSubmit();
		this.hideDropDownList();
	};

	// generates a hidden combobox to transfer selection
	this.prepareSubmit = function() {
    var strRes = '<select name="' + fakeComboName + '.selectedItemIndex">' +
                 '<option selected="selected" value="' + Math.abs (curSel) + '"></option>' +
                 '</select>';
    document.getElementById(instanceName + "ComboFakeBox").innerHTML = strRes;
		var descField = document.getElementById(instanceName + '_description');
		
		if (values.length > curSel) {
			document.getElementById(instanceName + "ComboeditInput").value = values[Math.abs(curSel)];
		
			if (descField != null) {
				descField.innerHTML = labels[Math.abs(curSel)];
			}
		}
	}
}