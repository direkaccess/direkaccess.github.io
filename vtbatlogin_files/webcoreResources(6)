/*
 * Change an elements visibility from visible to hidden or vice versa.
 */
function switchVisibility( elementId )
{
  if( document.getElementById( elementId ).style.visibility == 'hidden' )
    switchVisibilityTo( elementId, 'visible' );
  else if( document.getElementById( elementId ).style.visibility == 'visible' )
    switchVisibilityTo( elementId, 'hidden' );
}


/*
 * Change an elements visibility to the given value (visible or hidden).
 */
function switchVisibilityTo( elementId, value )
{
  if( value == 'hidden' )
  {
    document.getElementById( elementId ).style.visibility = value;
    document.getElementById( elementId + '_hideMode' ).value = 'hide';
  }
  else if( value == 'visible' )
  {
    document.getElementById( elementId ).style.visibility = value;
    document.getElementById( elementId + '_hideMode' ).value = 'show';
  }
}

function isPopupWindow( topWindowNameFromConfig )
{
  // init the known top window names
  var topWindowNames = new Array();
  topWindowNames.push( topWindowNameFromConfig );
  topWindowNames.push( "" );
  topWindowNames.push( null );

  // first check for a known top window name
  var topWindow = false;
  for( var i = 0; i < topWindowNames.length; i++ )
  {
    var topWindowName = topWindowNames[ i ];
    if( window.name == topWindowName )
    {
      topWindow = true;
      break;
    }
  }

  // if not found a top window we'll check for an opener
  if( !topWindow )
  {
    var openerPresent = window.opener != null;
    if( openerPresent )
    {
      return true;
    }
  }

  return false;
}


/*
 * Mouse Tracking
 */
var mousePosiX;
var mousePosiY;
this.mouseMove = function( e )
{
  if( !e ) e = window.event;
  mousePosiX = e.screenX;
  mousePosiY = e.screenY;
};

var CurrentModalWindow = false;
var OldTopOnClick;
var OldTopOnFocus;

function _HandleFocus()
{
  if( CurrentModalWindow )
  {
    if( !CurrentModalWindow.closed )
    {
      CurrentModalWindow.focus();
    }
    else
    {
// window.top.releaseEvents (Event.CLICK|Event.FOCUS);
      document.body.onclick = OldTopOnClick;
      window.onfocus = OldTopOnFocus;
      CurrentModalWindow = false;
    }
  }
  return false;
}

function absTop( el )
{
  return (el.offsetParent) ? el.offsetTop + absTop( el.offsetParent ) : el.offsetTop;
}
var waitShowingDelay = 2000;
var inWaitShowingTimer;
var waitShowingSince = -1;
var userCanCancelAfter = 10000;
var waitAllowCancel;

function resizeWaitContainer()
{
  var waitContainer = $( '#waitContainer' );
  var isVisible = (waitContainer.css( 'visibility' ) == 'visible');
  if( !isVisible )
    return;//||($(window).scrollTop()>waitContainer.height())) return;

  var windowWidth = $( window ).width();
  var windowHeight = $( window ).height();
  waitContainer.css( 'top', $( document ).scrollTop() );
  waitContainer.css( 'left', $( document ).scrollLeft() );
  waitContainer.css( 'width', windowWidth );
  waitContainer.css( 'height', windowHeight );

  var waitContainerBox = $( '#waitContainerBox' );
  if( waitContainerBox )
  {
    var boxWidth = waitContainerBox.width();
    var boxHeight = waitContainerBox.height();

    var boxTop = (windowHeight - boxHeight) / 2;
    var boxLeft = (windowWidth - boxWidth) / 2;
    waitContainerBox.css( 'top', boxTop );
    waitContainerBox.css( 'left', boxLeft );
  }
}

$( window ).scroll( function()
                    {
                      resizeWaitContainer();
                    } );

$( window ).resize( function()
                    {
                      resizeWaitContainer();
                    } );

function showWaitDelayed( allowCancel, delay )
{
  if( !delay )
    delay = waitShowingDelay;

  if( !inWaitShowingTimer )
  {
    if( allowCancel )
      inWaitShowingTimer = setTimeout( "showWait(true)", delay );
    else
      inWaitShowingTimer = setTimeout( "showWait(false)", delay );
  }
}

function InProgressLogo() {
	var inProgressLogo;
	
	function refreshPosition(e) {
		inProgressLogo.css("top", e.pageY );
		inProgressLogo.css("left", e.pageX );
	}

	function show() {
		//add listener to refresh logo position
		$(document).bind("mousemove.inProgressLogo", refreshPosition);
		inProgressLogo.fadeIn(50);
		jQuery.globalEval(showWaitDelayed(true, null));
	}
	
	function init() {
		$("body").append("<img id = 'inProgressLogo' style='display:none' src='images/cursor_wait.gif' border='0'></img>");
		inProgressLogo = $("#inProgressLogo");
		inProgressLogo.addClass("InProgressLogo");
		$(document).bind("mousedown.seitInProgressLogoPosition", refreshPosition);
	}

	function hide() {
		inProgressLogo.fadeOut(50);
		$(document).unbind("mousemove.inProgressLogo");
		jQuery.globalEval(hideWait());
	}
	return {
		init: init,
		show: show,
		hide: hide
	}
}
var inProgressLogo = new InProgressLogo();
$(document).ready(function() {
	inProgressLogo.init();
	//window.onbeforeunload = inProgressLogo.show;
});

function showWait( allowCancel )
{
  waitAllowCancel = allowCancel;
  inWaitShowingTimer = null;
  var waitContainer = $( '#waitContainer' );
  if( waitContainer )
  {
    waitContainer.css( 'visibility', 'visible' );
    resizeWaitContainer();
    waitShowingSince = new Date().getTime();
  }
}

function hideWait()
{
  // alert( "hideWait() aufgerufen inWaitShowingTimer=" + inWaitShowingTimer );
  if( inWaitShowingTimer )
  {
    clearTimeout( inWaitShowingTimer );
    inWaitShowingTimer = null;
  }
  var waitContainer = $( '#waitContainer' );
  if( waitContainer )
  {
    waitContainer.css( "visibility", 'hidden' );
  }
}

function cancelWait()
{
  if( waitAllowCancel && new Date().getTime() - userCanCancelAfter > waitShowingSince )
    hideWait();
}

function openPopup( url, width, height )
{
  var sw = window.open( url, "generalPopup", "resizable=yes, scrollbars=yes, status=yes, toolbar=no, width=" + width + ", height=" + height );
  sw.focus();
}

function openExternalPopup( url, width, height, windowName )
{
  var sw = window.open( "", windowName, "resizable=yes, scrollbars=yes, status=yes, toolbar=no" );
  try
  {
    sw.resizeTo( width, height );
  }
  catch( exception )
  {
    // the IE blocks resizing of the given popup is already open!
  }
  sw.location = url;
  sw.focus();
}


function doPrint()
{
  window.print();
}

function popupDocument( url )
{
  var sw = window.open( url, "documentPopup", "resizable=yes, scrollbars=yes" );
  sw.focus();
}

// /
function popup( url )
{
  var sw = window.open( url, "generalPopup", "resizable=yes, scrollbars=yes" );
  sw.focus();
}

function addHiddenField( form, fieldName, fieldValue )
{
  if( document.getElementById )
  {
    var hidden = document.createElement( 'input' );

    if( document.all )
    { // what follows should work
      // with NN6 but doesn't in M14
      hidden.type = "hidden";
      hidden.name = fieldName;
      hidden.value = fieldValue;
    }
    else if( document.getElementById )
    { // so here is the
      // NN6 workaround
      hidden.setAttribute( 'type', "hidden" );
      hidden.setAttribute( 'name', fieldName );
      hidden.setAttribute( 'value', fieldValue );
    }

    form.appendChild( hidden );
  }
}

function setDateAndClose( openerInputId, date )
{
  try
  {
    var openerInput = opener.document.getElementById( openerInputId );
    if( openerInput != null )
    {
      openerInput.value = date;
    }
  }
  catch( e )
  {
  }
  self.close();

  return false;
}

var keyHandlerRegistered = false;
function registerKeyHandlers()
{
  document.onkeydown = keyDown;
  document.onkeyup = keyUp;
  keyHandlerRegistered = true;
}
registerKeyHandlers();


var shiftKeyPressed = false;

function keyDown( evt )
{
  evt = (evt) ? evt : ((event) ? event : null);
  if( evt )
  {
    if( evt.keyCode == 16 ) // Shift
    {
      shiftKeyPressed = true;
    }
    else if( evt.keyCode == 9 ) // Tab
    {
      var node = (evt.target) ? evt.target : ((evt.srcElement) ? evt.srcElement : null);
      if( node )
      {
        var elementId = node.id;
        if( elementId ) return handleTabKey( elementId );
      }
    }
    else if( evt.keyCode == 13 ) // Enter
    {
      var node = (evt.target) ? evt.target : ((evt.srcElement) ? evt.srcElement : null);
      if( node )
      {
        if( node.getAttribute( "class" ) != null )
          return (node.getAttribute( "class" ).indexOf( 'FormAreaEditableComboBoxInput' ) != -1) ? false : handleEnterKey( node );
        else return (node.getAttribute( "className" ).indexOf( 'FormAreaEditableComboBoxInput' ) != -1) ? false : handleEnterKey( node );
      }
    }
  }
  return true;
}

function keyUp( evt )
{
  evt = (evt) ? evt : ((event) ? event : null);
  if( evt && evt.keyCode == 16 ) // Tab
  {
    shiftKeyPressed = false;
  }
}

/* A list of functions to call, when the body's onload-event is fired. */
var onloadFunctionArray = new Array();

/*
 * A list of functions to call, every time a action is fired. Need because ajax
 * register a onload function only on the real action
 */
var everyActionFunctionArray = new Array();

function pushFunctionToArrayIfNotExist( functionArray, _function )
{
  var exist = false;
  for( var i = 0; i < functionArray.length; ++i )
  {
    if( functionArray[i] == _function )
    {
      exist = true;
      break;
    }
  }

  if( !exist )
    functionArray.push( _function );
}
/*
 * Put a function to the list of functions that are executed on the
 * onload-event.
 */
function registerOnloadFunction( newFunction, everyAction )
{
  if( everyAction )
    pushFunctionToArrayIfNotExist( everyActionFunctionArray, newFunction );
  else
    pushFunctionToArrayIfNotExist( onloadFunctionArray, newFunction );
}

/* Execute all functions in the onload-function-list. */
function executeOnloadFunctions()
{
  for( var i = 0; i < onloadFunctionArray.length; ++i )
  {
    try
    {
      onloadFunctionArray[i]();
    }
    catch( exception )
    {
      // maybe we should log something
    }
  }
  onloadFunctionArray = new Array(); // clear all

  for( var j = 0; j < everyActionFunctionArray.length; j++ )
  {
    try
    {
      everyActionFunctionArray[j]();
    }
    catch( exception )
    {
      // maybe we should log something
    }
  }
}

/* A list of functions to call, when the window resize-event is fired. */
var onresizeFunctionArray = new Array();

/*
 * Put a function to the list of functions that are executed on the
 * onresize-event.
 */
function registerOnresizeFunction( newFunction )
{
  onresizeFunctionArray.push( newFunction );
}

/* Execute all functions in the onresize-function-list. */
function executeOnresizeFunctions()
{
  for( var i = 0; i < onresizeFunctionArray.length; ++i )
  {
    try
    {
      onresizeFunctionArray[i]();
    }
    catch( exception )
    {
      // maybe we should log something
    }
  }
}

var tabIndexArray = new Array();

function registerTabIndexIds( tabIndexIds )
{
  for( var i = 0; i < tabIndexIds.length; i++ )
  {
    tabIndexArray [tabIndexArray.length] = tabIndexIds [i];
  }
  if( tabIndexArray.length > 0 && !keyHandlerRegistered )
  {
    registerKeyHandlers();
  }
}

function handleTabKey( elementId )
{
  for( var i = 0; i < tabIndexArray.length; i++ )
  {
    if( tabIndexArray [i] == elementId )
    {
      // element found
      i = i + (shiftKeyPressed ? -1 : 1);
      for( var posi = i; posi >= 0 && posi < tabIndexArray.length; posi = posi + (shiftKeyPressed ? -1 : 1) )
      {
        var newElement = document.getElementById( tabIndexArray [posi] );
        if( newElement && !newElement.disabled )
        {
          newElement.focus();
          return false; // break future processing
        }
      }
      return true; // nothing found: default browser handling
    }
  }
  return true;
}

function getParentFormNode( node )
{
  if( node == null || (node.nodeName != null && node.nodeName.toLowerCase() == 'form') )
    return node;
  else
    return getParentFormNode( node.parentNode );
}

function getDestinationElementByClickOnEnterOnCssName( node )
{
  // check for clickOnEnter in css name of the input element
  if( node.className )
  {
    var classNames = node.className.split( " " );
    for( var i = 0; i < classNames.length; i++ )
    {
      if( classNames[i].match( /clickOnEnter.+/ ) )
      {
        var id = classNames[i].replace( /clickOnEnter/g, "" );
        return  document.getElementById( id );
      }
    }
  }

  return null;
}

function getHighestDefaultButtonIndexElement( node )
{
  var formNode = getParentFormNode( node );
  if( formNode != null )
  {
    var elements = document.getElementsByTagName( "input" );
    if( elements )
    {
      var index = 0;
      var destinationElement = null;

      for( var i = 0; i < elements.length; i++ )
      {
        if( elements[i].className )
        {
          var classNames = elements[i].className.split( " " );
          for( var j = 0; j < classNames.length; j++ )
          {
            if( classNames[j].match( /defaultButtonIndex.+/ ) )
            {
              var buttonIndex = classNames[j].replace( /defaultButtonIndex/g, "" );
              if( parseInt( buttonIndex ) > index )
              {
                index = parseInt( buttonIndex );
                destinationElement = elements[i];
              }
            }
          }
        }
      }

      return destinationElement;
    }
  }

  return null;
}

function handleEnterKey( node )
{
  if( node.nodeName != null && node.nodeName.toUpperCase() == "TEXTAREA" )
  {
    node.nodeValue += "\n";
    return true;
  }

  var elementToClick = getDestinationElementByClickOnEnterOnCssName( node ) || getHighestDefaultButtonIndexElement( node );
  if( elementToClick )
  {
    elementToClick.click();

    return false; // break future processing
  }

  return true;
}

var _ClickCount = 0;
function resetClickOnce()
{
  _ClickCount = 0;
}

function clickOnce()
{
  if( _ClickCount == 0 )
  {
    _ClickCount++;
    setTimeout( resetClickOnce, 2000 );
    return true;
  }
  return false;
}

function nothing()
{
  return false;
}
if( document.getElementById )
  document.oncontextmenu = nothing;


function getTime()
{
  return new Date().getTime();
}

/* ********************************* */
function checkLength( obj, maxLength )
{
  if( obj != null )
  {
    var strLength = obj.value.length;

    if( strLength == 1 && obj.value.substring( 0, 1 ) == '' )
    {
      obj.value = '';
      strLength = 0;
    }

    if( strLength > maxLength )
    {
      obj.value = obj.value.substring( 0, maxLength );
    }
  }
}

function showMenuChangeWarning( data )
{
  return confirm( data );
}

function defineIndexOfForArrays()
{
  // https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array/indexOf
  if( !Array.prototype.indexOf )
  {
    Array.prototype.indexOf = function( elt /* , from */ )
    {
      var len = this.length >>> 0;

      var from = Number( arguments[1] ) || 0;
      from = (from < 0)
        ? Math.ceil( from )
        : Math.floor( from );
      if( from < 0 )
        from += len;

      for( ; from < len; from++ )
      {
        if( from in this &&
            this[from] === elt )
          return from;
      }
      return -1;
    };
  }
}

function scrollToElem( elem )
{
  var windowScrollTop = $( window ).scrollTop();
  var windowHeight = $( window ).height();
  var elemOffset = $( elem ).offset();
  var elemHeight = $( elem ).height();

  //isn't before && isn't after
  var isVisible = windowScrollTop < elemOffset.top &&
                  (windowScrollTop + windowHeight) > (elemOffset.top + elemHeight);

  //if it isn't visible scroll to ensure visibility
  if( !isVisible )
  {
    var scrollToPos = elemOffset.top - (windowHeight / 2.0);
    $( window ).scrollTop( scrollToPos, 0, {axis:'y'} );
  }
}

function appendDebug( text )
{
  var debug = document.getElementById( "debug" );
  if( debug )
  {
    debug.innerHTML = debug.innerHTML + "<br/>" + new Date() + " - " + text;
  }
}

function setDebug( text )
{
  var debug = document.getElementById( "debug" );
  if( debug )
    debug.innerHTML = new Date() + " - " + text;
}

var lastHoverBoxId;
var lastHoverBoxTimeoutHandler;
function enableHoverBox( id )
{
  var elem = document.getElementById( id );
  if( elem )
  {
    elem.style.display = "block";
    if( lastHoverBoxId )
    {
      if( lastHoverBoxId == id && lastHoverBoxTimeoutHandler )
      {
        window.clearTimeout( lastHoverBoxTimeoutHandler );
      }
      if( lastHoverBoxId != id )
      {
        var elemOther = document.getElementById( lastHoverBoxId );
        if( elemOther )
          elemOther.style.display = "none";
      }
    }

    lastHoverBoxId = id;
  }
}

function disableHoverBox( id )
{
  var elem = document.getElementById( id );
  if( elem )
  {
    var func = function()
    {
      elem.style.display = "none";
    };

    lastHoverBoxTimeoutHandler = window.setTimeout( func, 500 );
  }
}

function showOverlayMessage( parent, id, message, e )
{
  var overlayDiv = document.createElement( "div" );
  overlayDiv.setAttribute( "id", id );
  overlayDiv.style.zIndex = "10000"; // make sure that the div is in front of the other elements
  overlayDiv.className = "OverlayHint";
  overlayDiv.innerHTML=message;
  parent.appendChild( overlayDiv );
  window.setTimeout( "showOverlayMessageImmediately('" + id + "')", 1000 );
}

function showOverlayMessageImmediately( id )
{
  document.getElementById( id ).style.display = "block";
}

function removeElement( id )
{
  document.getElementById( id ).parentNode.removeChild( document.getElementById( id ) );
}

