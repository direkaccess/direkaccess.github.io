function WebCore()
{

    /**
     * Removes hidden field from form of the child.
     */
    this.removeHiddenField = function( childElement, fieldName )
    {
        var form;
        var hiddenField;

        form = $( childElement ).parents( 'form:first' );
        hiddenField = form.find( "input[name=\'" + fieldName +"\']" );
        hiddenField.remove();
    }

    /*
    * Add a hidden field to the form.
    */
  this.addHiddenField = function( childElement, fieldName, fieldValue )
  {
    var form;
    var hiddenField;

    hiddenField = $('<input/>', {type:'hidden',name:fieldName,value:fieldValue} );
    form = $( childElement ).parents( 'form:first' );
    hiddenField.appendTo(form);
  };

  this.submitForm = function( elem )
  {
    var f;

    f = getParentFormNode(elem);
    f.submit();
  };

  /**
   * Hide the element with the given id.
   * @param id id of the element
   */
  this.hideElement = function( id )
  {
    if( document.getElementById )
      document.getElementById( id ).style.display = 'none';
    else
    {
      if( document.layers )
        document.id.display = 'none';
      else
        document.all.id.style.display = 'none';
    }
  };

  /*
   * This function needs access to the global var _ClickCount, so we
   * map forward to the global function clickOnce() (hoping, that it
   * is accessible).
   */
  this.clickOnce = function()
  {
    return clickOnce();
  };


  /*
   * Append an anchor to the parent form of the given element.
   */
  this.appendAnchorToForm = function( element, anchor )
  {
    // get the form from the given element
    var form = element.form;

    // get the current form action url
    var newUrl = form.action;

    // append the anchor
    newUrl = newUrl + "#" + anchor;

    // set as new form action
    form.action = newUrl;
  };


  this.showMenuChangeWarning = function( data )
  {
    return confirm( data );
  };

  this.focusOnLength = function( control, length, idOfElementToFocus )
  {
    var content = control.value;

    if( content.length >= length )
    {
      var controlNextFocus;

      controlNextFocus = window.document.getElementById( idOfElementToFocus );
      if( controlNextFocus )
        controlNextFocus.focus();
    }
  };

  this.showWaitDelayed = function ( allowCancel )
  {
    showWaitDelayed( allowCancel );
  };

  /*
   * Opens a popup windows using given parameters
   */
  this.openPopup = function ( url, windowName, width, height )
  {
    var popupWindow = window.open( "", windowName, "resizable=yes, scrollbars=yes, status=yes, toolbar=no" );
    try
    {
      popupWindow.resizeTo( width, height );
    }
    catch ( exception )
    {
      // the IE blocks resizing of the given popup is already open!
    }
    popupWindow.location = url;
    popupWindow.focus();
  };


  var hoverDelayTimer;
  this.clearHoverDelayTimer = function()
  {
    if( hoverDelayTimer )
    {
      clearTimeout( hoverDelayTimer );
      hoverDelayTimer = null;
    }
  };

  this.showHover = function( id, delay )
  {
    if( delay && delay > 0 )
      hoverDelayTimer = setTimeout( "webcore.showHover( '" + id + "' )", delay ); // recursive
    else
    {
      this.clearHoverDelayTimer();
      var elem = document.getElementById( id );
      if( elem )
        elem.style.display = "block";
    }
  };

  this.hideHover = function( id )
  {
    this.clearHoverDelayTimer();
    var elem = document.getElementById( id );
    if( elem )
      elem.style.display = "none";
  };

  var focusToRetrieve = new Array();

  this.retrieveFocus = function ( id, displayOrder )
  {
    // registered on load function
    registerOnloadFunction( this.retrieveFocusOnLoad, true );

    if( !focusToRetrieve[displayOrder] )
      focusToRetrieve[displayOrder] = id;
    this.retrieveFocusOnLoad();
  };

  this.retrieveFocusOnLoad = function ()
  {
    var idToFocus;
    var lowestDisplayOrder;
    for( var displayOrder in focusToRetrieve )
    {
      if( !lowestDisplayOrder || displayOrder < lowestDisplayOrder )
      {
        lowestDisplayOrder = displayOrder;
        idToFocus = focusToRetrieve[displayOrder];
      }
    }

    var elem = document.getElementById( idToFocus );
    if( elem )
    {
      focusToRetrieve = new Array();
      scrollToElem( elem );
      elem.focus();

      // workaraound for IE
      setTimeout( function()
                  {
                    elem.focus();
                  }, 10 );
      //elem.select();
    }
  };
}

// create a webcore-object to get access to the methods
webcore = new WebCore();
